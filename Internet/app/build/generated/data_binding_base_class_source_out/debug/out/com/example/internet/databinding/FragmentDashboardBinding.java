// Generated by view binder compiler. Do not edit!
package com.example.internet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.internet.R;
import com.github.angads25.toggle.widget.LabeledSwitch;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDashboardBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LabeledSwitch fanBtn;

  @NonNull
  public final LabeledSwitch ligBtn;

  @NonNull
  public final TextView txtHum;

  @NonNull
  public final TextView txtLig;

  @NonNull
  public final TextView txtTem;

  private FragmentDashboardBinding(@NonNull LinearLayout rootView, @NonNull LabeledSwitch fanBtn,
      @NonNull LabeledSwitch ligBtn, @NonNull TextView txtHum, @NonNull TextView txtLig,
      @NonNull TextView txtTem) {
    this.rootView = rootView;
    this.fanBtn = fanBtn;
    this.ligBtn = ligBtn;
    this.txtHum = txtHum;
    this.txtLig = txtLig;
    this.txtTem = txtTem;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDashboardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDashboardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_dashboard, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDashboardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fanBtn;
      LabeledSwitch fanBtn = ViewBindings.findChildViewById(rootView, id);
      if (fanBtn == null) {
        break missingId;
      }

      id = R.id.ligBtn;
      LabeledSwitch ligBtn = ViewBindings.findChildViewById(rootView, id);
      if (ligBtn == null) {
        break missingId;
      }

      id = R.id.txtHum;
      TextView txtHum = ViewBindings.findChildViewById(rootView, id);
      if (txtHum == null) {
        break missingId;
      }

      id = R.id.txtLig;
      TextView txtLig = ViewBindings.findChildViewById(rootView, id);
      if (txtLig == null) {
        break missingId;
      }

      id = R.id.txtTem;
      TextView txtTem = ViewBindings.findChildViewById(rootView, id);
      if (txtTem == null) {
        break missingId;
      }

      return new FragmentDashboardBinding((LinearLayout) rootView, fanBtn, ligBtn, txtHum, txtLig,
          txtTem);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
